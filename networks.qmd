---
title: Networking
---

## Network Fundamentals — Summary of Slides 1–38

### Historical Background and Internet Foundations (Slides 1–16)

* Early developments: ARPANET, Cyclades, and ALOHANet pioneered **packet switching**.
* The **Internet** emerged as a global interconnection of autonomous systems using the **TCP/IP protocol suite**.
* **Tim Berners-Lee's World Wide Web (1989–1991)** introduced:

  * A unified model of hyperlinked documents (HTML)
  * The HTTP protocol (stateless)
  * URLs for addressing
  * The browser-server interaction model
* The **stateless nature of HTTP** means each request is handled independently — servers do not retain memory of previous interactions.

### Transmission Media and Infrastructure (Slides 16–20)

* Data transmission can occur over:

  * **Copper (UTP)**: electrical signals
  * **Fiber optics**: light pulses
  * **Radio**: electromagnetic waves (Wi-Fi, LTE)
* Fiber-optic links offer high bandwidth and low latency — widely used in backbone and undersea cables.
* **Satellite communication** has higher propagation delay (≥500 ms round-trip) due to distance (\~36,000 km geostationary orbit).
* Real-world systems combine many media and technologies in layered infrastructure.

### Circuit Switching vs. Packet Switching (Slides 18–23)

* **Circuit switching**: fixed, reserved paths (e.g. telephony)

  * Uses **TDM (Time Division Multiplexing)** or **FDM (Frequency Division Multiplexing)**
* **Packet switching**: data is broken into packets routed independently

  * Uses **statistical multiplexing**
  * No reservation of bandwidth; packets share the link dynamically
* Trade-offs of packet switching:

  * More efficient use of bandwidth under bursty traffic
  * Potential for packet delay, loss, and reordering

### Network Performance Metrics (Slides 24–32)

#### Four types of delay:

1. **Processing delay**: time to examine packet header and perform checks
2. **Queueing delay**: time waiting in the router buffer
3. **Transmission delay**:

   $$
   d_{\text{trans}} = \frac{L}{R}
   $$

   where:

   * $L$: packet size (bits)
   * $R$: link bandwidth (bps)
4. **Propagation delay**:

   $$
   d_{\text{prop}} = \frac{d}{s}
   $$

   where:

   * $d$: physical distance (meters)
   * $s$: signal propagation speed (m/s)

#### Total node delay:

$$
d_{\text{nodal}} = d_{\text{proc}} + d_{\text{queue}} + d_{\text{trans}} + d_{\text{prop}}
$$

#### Traffic intensity and queue behavior:

Let:

* $a$: average packet arrival rate (packets/sec)
* $L$: packet size (bits)
* $R$: link bandwidth (bps)

Then:

$$
\text{Traffic intensity} = \frac{aL}{R}
$$

Interpretation:

* If $\frac{aL}{R} \geq 1$: the queue grows without bound
* As $\frac{aL}{R} \rightarrow 1$: delay increases sharply

#### End-to-end delay over multiple hops:

$$
d_{\text{end-to-end}} = \sum_{i=1}^N (d_{\text{proc},i} + d_{\text{queue},i} + d_{\text{trans},i} + d_{\text{prop},i})
$$

where $N$ is the number of routers.

#### Traceroute:

* Uses IP TTL (Time-To-Live) field to probe each hop
* When TTL reaches zero, routers send an ICMP “Time Exceeded” message
* Allows measurement of **round-trip time (RTT)** per hop

---

### Throughput (Slides 33–35)

* **Throughput**: the rate at which data is successfully delivered (bps)

#### Two cases (Slide 34):

If:

* $R_S$: server’s sending rate
* $R_C$: client-side link rate

Then:

* If $R_S < R_C$, then $\text{Throughput} = R_S$
* If $R_S > R_C$, then $\text{Throughput} = R_C$

$$
\text{Throughput} = \min(R_S, R_C)
$$

#### Multi-user sharing (Slide 35):

If 10 users share a backbone link of rate $R$, and each has:

* Sender link: $R_s$
* Receiver link: $R_c$

Then per-connection throughput is:

$$
\text{Throughput} = \min(R_s, R_c, \frac{R}{10})
$$

---

### Protocol Layering: Foundations (Slides 36–38)

* Due to network complexity, functionality is divided into **layers**, each with clear responsibilities.

* A layer $k$ uses only the services of layer $k-1$:

  $$
  \text{Layer } k \longrightarrow \text{uses services of Layer } (k-1)
  $$

* Each layer communicates **vertically** (service interface) and defines **horizontal protocols** (with its counterpart on the remote host).

* Layering enables:

  * Modularity
  * Replaceability
  * Interoperability
  * Abstraction from hardware details

